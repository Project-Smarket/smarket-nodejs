var express = require('express');
var router = express.Router();
var bcryptjs = require('bcryptjs');

var mysql_dbc = require('../common/db_conf')();
var pool = mysql_dbc.init();

// resource들의 목록을 표시	GET
// /resource
// resource 하나의 내용을 표시
// GET	/resource/:id
// resource를 생성 
// POST	/resource
// resource를 수정
// PUT	/resource/:id
// resource를 삭제
// DELETE	/resource/:id

//restful에서 생성
router.post('/register', function (req, res, next) {
    console.log('사용자 등록 호출됨.')

    var paramId = req.body.id;
    var paramPwd = req.body.password;
    var paramName = req.body.name;

    pool.getConnection(function (err, conn){
        if (err) {
            if (conn) {
                conn.release(); // 반드시 해제 해야합니다.
            }
            res.status(500);
            res.json({success:false, message:err});
        }
        console.log('데이터베이스 연결 스레드 아이디 : ' + conn.threadId);

        var exec = conn.query('insert into users (userId, userPwd, userName) values (?, ?, ?)',
        [paramId, paramPwd, paramName], function (err, result) {
            conn.release(); // 반드시 해제해야합니다.
            console.log('실행 대상 SQL : ' + exec.sql);

            if (err) {
                console.log('SQL 실행 시 오류 발생함.');
                console.dir(err);

                res.status(500);
                res.json({success:false, message:err});
             }
            else {
             console.log('데이터 삽입됨.');
             res.json({success:true});
            }
        });
        conn.on('error', function (err) {
            console.log('데이터베이스 연결 시 에러 발생함.');
            console.dir(err);
            res.status(500);
            res.json({success:false, message:err});
        });
    });
});

router.post('/login', function(req, res, next){
    console.log('사용자 로그인 호출됨.')

    var userId = req.body.id;
    var userPassword = req.body.password;

    console.log('요청 파라미터 : ' + userId + ', ' + userPassword);
    var hash = bcryptjs.hashSync(userPassword, 10);
    console.log(hash); // 패스워드 암호화

    pool.getConnection(function(err, conn){
        if(err){
            if(conn){
                conn.release();//반드시 해제
            }
            res.status(500);
            res.json({success:false, message:err});
        }
        console.log('데이터베이스 연결 스레드 아이디 : ' + conn.threadId);

        //SQL문 실행
        var exec = conn.query('select * from users where UserId = ?', userId, function(err, result){
            if(err){
                console.log('SQL 실행 시 오류 발생함.');
                console.dir(err);

                res.status(500);
                res.json({success:false, message:err});
            }
            
            else {
                console.log(result);
                if(result.length == 0){
                    res.json({success:false, message:'해당 Email이 존재하지 않습니다.'});
                }
                else {
                    //bcrypt의 compareSync 메서드를 통해서 로그인 폼에서 넘어온 패스워드와 데이터베이스의 패스워드가 일치하는지 여부를 판단.
                    if(!bcryptjs.compareSync(result[0].UserPwd, hash)){
                        res.json({success:false, message:'비밀번호가 일치하지 않습니다.'});
                    }
                    else {
                        res.json({success:true});
                    }
                }
            }
        });
    });
});


module.exports = router;











var express = require('express');
var router = express.Router();
var bcryptjs = require('bcryptjs');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var mysql_dbc = require('../common/db_conf')();
var pool = mysql_dbc.init();


//만들어야할것
//1. 처음 사용자
//2.

router.post('/register', passport.authenticate('register-local'));

passport.use('register-local', new LocalStrategy({
    /*usernameField와 passwordField는 
    데이터가 { id: 'zerocho', pw: 'pswd' } 이렇게 오면 뒤의 콜백 함수의 id 값이 
    zerocho, password 값이 pswd가 됩니다.*/
    usernameField: 'id',
    passwordField: 'password',
    passReqToCallback: true
},
    function (req, id, password, done) {
        pool.getConnection(function (err, conn) {
            if (err) {
                if (conn) {
                    conn.release(); // 반드시 해제 해야합니다.
                }
                res.status(500);
                res.json({ success: false, message: err });
            }
            console.log('데이터베이스 연결 스레드 아이디 : ' + conn.threadId);
            conn.query('select * from users where id = ?'), [id], function (err, rows) {
                if (err) return done(err);

                if (rows.length) {
                    res.status(500);
                    res.json({success:false, message:'이미 사용중인 ID 입니다'});
                }
                else {
                    bcryptjs.hash(password, null, null, function (err, hash) {
                        var exec = conn.query('insert into users (id, hashed_password, name) values (?, ?, ?)',
                            [id, password, name], function (err, result) {
                                conn.release(); // 반드시 해제해야합니다.
                                console.log('실행 대상 SQL : ' + exec.sql);

                                if (err) {
                                    console.log('SQL 실행 시 오류 발생함.');
                                    console.dir(err);

                                    res.status(500);
                                    res.json({ success: false, message: err });
                                }
                                else {
                                    console.log('데이터 삽입됨.');
                                    return done(null, {'id': id});
                                }
                            });
                        conn.on('error', function (err) {
                            console.log('데이터베이스 연결 시 에러 발생함.');
                            console.dir(err);
                            res.status(500);
                            res.json({ success: false, message: err });
                        });
                    });
                }
            }
        });
    })
);


    

router.post('/login', function(req, res, next){
    console.log('사용자 로그인 호출됨.')

    var userId = req.body.id;
    var userPassword = req.body.password;

    console.log('요청 파라미터 : ' + userId + ', ' + userPassword);
    var hash = bcryptjs.hashSync(userPassword, 10);
    console.log(hash); // 패스워드 암호화

    pool.getConnection(function(err, conn){
        if(err){
            if(conn){
                conn.release();//반드시 해제
            }
            res.status(500);
            res.json({success:false, message:err});
        }
        console.log('데이터베이스 연결 스레드 아이디 : ' + conn.threadId);

        //SQL문 실행
        var exec = conn.query('select * from users where id = ?', userId, function(err, result){
            if(err){
                console.log('SQL 실행 시 오류 발생함.');
                console.dir(err);

                res.status(500);
                res.json({success:false, message:err});
            }
            
            else {
                console.log(result);
                if(result.length == 0){
                    res.json({success:false, message:'해당 Email이 존재하지 않습니다.'});
                }
                else {
                    //bcrypt의 compareSync 메서드를 통해서 로그인 폼에서 넘어온 패스워드와 데이터베이스의 패스워드가 일치하는지 여부를 판단.
                    if(!bcryptjs.compareSync(result[0].UserPwd, hash)){
                        res.json({success:false, message:'비밀번호가 일치하지 않습니다.'});
                    }
                    else {
                        res.json({success:true});
                    }
                }
            }
        });
    });
});


module.exports = router;
